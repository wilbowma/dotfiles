# -*- mode: mutt; -*-

#unset pgp_sign_as
## automatically sign all outcoming messages
#unset crypt_autosign
## sign only replies to signed messages
#unset crypt_replysign

#set pgp_use_gpg_agent = yes
set crypt_use_gpgme = yes

##source 'gpg --list-keys | perl -e "while(<>){/(\\b|[<(])([^ \\t]+@[^ \\t]+\.[^ \t]+)(\\b|[>)])/ and \$a{\$2}=1;}print map qq/send-hook \"~C \$_\" set pgp_autosign pgp_autoencrypt\n/, keys %a;"|'

### S/MIME
#set smime_is_default="no"
#set crypt_autosmime="yes"
#set smime_timeout="300"
#set smime_default_key="39d79d8f.0"
#
#set smime_ca_location="~/.smime/ca-bundle.crt"
#set smime_certificates="~/.smime/certificates"
#set smime_keys="~/.smime/keys"
#
## These are used to extract a certificate from a message.
## First generate a PKCS#7 structure from the message.
#set smime_pk7out_command="openssl smime -verify -in %f -noverify -pk7out"
#
## Extract the included certificate(s) from a PKCS#7 structure.
#set smime_get_cert_command="openssl pkcs7 -print_certs -in %f"
#
## Extract the signer's certificate only from a S/MIME signature (sender verification)
#set smime_get_signer_cert_command="openssl smime -verify -in %f -noverify -signer %c -out /dev/null"
#
## This is used to get the email address the certificate was issued to.
#set smime_get_cert_email_command="openssl x509 -in  %f -noout -email"
#
## Add a certificate to the database using smime_keys.
#set smime_import_cert_command="smime_keys add_cert %f"
#
## Sction B: Outgoing messages
#
## Algorithm to use for encryption.
## valid choices are rc2-40, rc2-64, rc2-128, des, des3
#set smime_encrypt_with="des3"
#
## Encrypt a message. Input file is a MIME entity.
#set smime_encrypt_command="openssl smime -encrypt -%a -outform DER -in %f %c"
#
## Sign.
#set smime_sign_command="openssl smime -sign -signer %c -inkey %k -passin stdin -in %f -certfile %i -outform DER"
#
##Section C: Incoming messages
#
## Decrypt a message. Output is a MIME entity.
#set smime_decrypt_command="openssl smime -decrypt  -passin stdin -inform DER -in %f -inkey %k -recip %c"
#
## Verify a signature of type multipart/signed
#set smime_verify_command="openssl smime -verify -inform DER -in %s %C -content %f"
#
## Verify a signature of type application/x-pkcs7-mime
#set smime_verify_opaque_command="\
#openssl smime -verify -inform DER -in %s %C || \
#openssl smime -verify -inform DER -in %s -noverify 2>/dev/null"

# Section D: Alternatives

# Sign.  If you wish to NOT include the certificate your CA used in signing
# your public key, use this command instead.
# set smime_sign_command="/opt/local/bin/openssl smime -sign -signer %c -inkey %k -passin stdin -in %f -outform DER"
#
# In order to verify the signature only and skip checking the certificate  chain:
#
# set smime_verify_command="/opt/local/bin/openssl smime -verify -inform DER -in %s -content %f -noverify"
# set smime_verify_opaque_command="/opt/local/bin/openssl smime -verify -inform DER -in %s -noverify"
